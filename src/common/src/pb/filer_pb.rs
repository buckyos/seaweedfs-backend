// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupDirectoryEntryRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupDirectoryEntryResponse {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<Entry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListEntriesRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub prefix: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub start_from_file_name: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub inclusive_start_from: bool,
    #[prost(uint32, tag = "5")]
    pub limit: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListEntriesResponse {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<Entry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoteEntry {
    #[prost(string, tag = "1")]
    pub storage_name: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub last_local_sync_ts_ns: i64,
    #[prost(string, tag = "3")]
    pub remote_e_tag: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub remote_mtime: i64,
    #[prost(int64, tag = "5")]
    pub remote_size: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entry {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub is_directory: bool,
    #[prost(message, repeated, tag = "3")]
    pub chunks: ::prost::alloc::vec::Vec<FileChunk>,
    #[prost(message, optional, tag = "4")]
    pub attributes: ::core::option::Option<FuseAttributes>,
    #[prost(map = "string, bytes", tag = "5")]
    pub extended: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", tag = "7")]
    pub hard_link_id: ::prost::alloc::vec::Vec<u8>,
    /// only exists in hard link meta data
    #[prost(int32, tag = "8")]
    pub hard_link_counter: i32,
    /// if not empty, the file content
    #[prost(bytes = "vec", tag = "9")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "10")]
    pub remote_entry: ::core::option::Option<RemoteEntry>,
    /// for bucket only. Positive/Negative means enabled/disabled.
    #[prost(int64, tag = "11")]
    pub quota: i64,
    #[prost(int64, tag = "12")]
    pub worm_enforced_at_ts_ns: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullEntry {
    #[prost(string, tag = "1")]
    pub dir: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub entry: ::core::option::Option<Entry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventNotification {
    #[prost(message, optional, tag = "1")]
    pub old_entry: ::core::option::Option<Entry>,
    #[prost(message, optional, tag = "2")]
    pub new_entry: ::core::option::Option<Entry>,
    #[prost(bool, tag = "3")]
    pub delete_chunks: bool,
    #[prost(string, tag = "4")]
    pub new_parent_path: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_from_other_cluster: bool,
    #[prost(int32, repeated, tag = "6")]
    pub signatures: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileChunk {
    /// to be deprecated
    #[prost(string, tag = "1")]
    pub file_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub offset: i64,
    #[prost(uint64, tag = "3")]
    pub size: u64,
    #[prost(int64, tag = "4")]
    pub modified_ts_ns: i64,
    #[prost(string, tag = "5")]
    pub e_tag: ::prost::alloc::string::String,
    /// to be deprecated
    #[prost(string, tag = "6")]
    pub source_file_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub fid: ::core::option::Option<FileId>,
    #[prost(message, optional, tag = "8")]
    pub source_fid: ::core::option::Option<FileId>,
    #[prost(bytes = "vec", tag = "9")]
    pub cipher_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "10")]
    pub is_compressed: bool,
    /// content is a list of FileChunks
    #[prost(bool, tag = "11")]
    pub is_chunk_manifest: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileChunkManifest {
    #[prost(message, repeated, tag = "1")]
    pub chunks: ::prost::alloc::vec::Vec<FileChunk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FileId {
    #[prost(uint32, tag = "1")]
    pub volume_id: u32,
    #[prost(uint64, tag = "2")]
    pub file_key: u64,
    #[prost(fixed32, tag = "3")]
    pub cookie: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FuseAttributes {
    #[prost(uint64, tag = "1")]
    pub file_size: u64,
    /// unix time in seconds
    #[prost(int64, tag = "2")]
    pub mtime: i64,
    #[prost(uint32, tag = "3")]
    pub file_mode: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(uint32, tag = "5")]
    pub gid: u32,
    /// unix time in seconds
    #[prost(int64, tag = "6")]
    pub crtime: i64,
    #[prost(string, tag = "7")]
    pub mime: ::prost::alloc::string::String,
    #[prost(int32, tag = "10")]
    pub ttl_sec: i32,
    /// for hdfs
    #[prost(string, tag = "11")]
    pub user_name: ::prost::alloc::string::String,
    /// for hdfs
    #[prost(string, repeated, tag = "12")]
    pub group_name: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "13")]
    pub symlink_target: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "14")]
    pub md5: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "16")]
    pub rdev: u32,
    #[prost(uint64, tag = "17")]
    pub inode: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEntryRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub entry: ::core::option::Option<Entry>,
    #[prost(bool, tag = "3")]
    pub o_excl: bool,
    #[prost(bool, tag = "4")]
    pub is_from_other_cluster: bool,
    #[prost(int32, repeated, tag = "5")]
    pub signatures: ::prost::alloc::vec::Vec<i32>,
    #[prost(bool, tag = "6")]
    pub skip_check_parent_directory: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEntryResponse {
    #[prost(string, tag = "1")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateEntryRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub entry: ::core::option::Option<Entry>,
    #[prost(bool, tag = "3")]
    pub is_from_other_cluster: bool,
    #[prost(int32, repeated, tag = "4")]
    pub signatures: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateEntryResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendToEntryRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub entry_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub chunks: ::prost::alloc::vec::Vec<FileChunk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppendToEntryResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteEntryRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// bool is_directory = 3;
    #[prost(bool, tag = "4")]
    pub is_delete_data: bool,
    #[prost(bool, tag = "5")]
    pub is_recursive: bool,
    #[prost(bool, tag = "6")]
    pub ignore_recursive_error: bool,
    #[prost(bool, tag = "7")]
    pub is_from_other_cluster: bool,
    #[prost(int32, repeated, tag = "8")]
    pub signatures: ::prost::alloc::vec::Vec<i32>,
    #[prost(int64, tag = "9")]
    pub if_not_modified_after: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteEntryResponse {
    #[prost(string, tag = "1")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AtomicRenameEntryRequest {
    #[prost(string, tag = "1")]
    pub old_directory: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub old_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_directory: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub new_name: ::prost::alloc::string::String,
    #[prost(int32, repeated, tag = "5")]
    pub signatures: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AtomicRenameEntryResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamRenameEntryRequest {
    #[prost(string, tag = "1")]
    pub old_directory: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub old_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_directory: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub new_name: ::prost::alloc::string::String,
    #[prost(int32, repeated, tag = "5")]
    pub signatures: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamRenameEntryResponse {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub event_notification: ::core::option::Option<EventNotification>,
    #[prost(int64, tag = "3")]
    pub ts_ns: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssignVolumeRequest {
    #[prost(int32, tag = "1")]
    pub count: i32,
    #[prost(string, tag = "2")]
    pub collection: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub replication: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub ttl_sec: i32,
    #[prost(string, tag = "5")]
    pub data_center: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub rack: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub data_node: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub disk_type: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssignVolumeResponse {
    #[prost(string, tag = "1")]
    pub file_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub count: i32,
    #[prost(string, tag = "5")]
    pub auth: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub collection: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub replication: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub error: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub location: ::core::option::Option<Location>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupVolumeRequest {
    #[prost(string, repeated, tag = "1")]
    pub volume_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Locations {
    #[prost(message, repeated, tag = "1")]
    pub locations: ::prost::alloc::vec::Vec<Location>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Location {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub public_url: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub grpc_port: u32,
    #[prost(string, tag = "4")]
    pub data_center: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupVolumeResponse {
    #[prost(map = "string, message", tag = "1")]
    pub locations_map: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Locations,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Collection {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CollectionListRequest {
    #[prost(bool, tag = "1")]
    pub include_normal_volumes: bool,
    #[prost(bool, tag = "2")]
    pub include_ec_volumes: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionListResponse {
    #[prost(message, repeated, tag = "1")]
    pub collections: ::prost::alloc::vec::Vec<Collection>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCollectionRequest {
    #[prost(string, tag = "1")]
    pub collection: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteCollectionResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatisticsRequest {
    #[prost(string, tag = "1")]
    pub replication: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub collection: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ttl: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub disk_type: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StatisticsResponse {
    #[prost(uint64, tag = "4")]
    pub total_size: u64,
    #[prost(uint64, tag = "5")]
    pub used_size: u64,
    #[prost(uint64, tag = "6")]
    pub file_count: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingRequest {
    /// default to ping itself
    #[prost(string, tag = "1")]
    pub target: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub target_type: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PingResponse {
    #[prost(int64, tag = "1")]
    pub start_time_ns: i64,
    #[prost(int64, tag = "2")]
    pub remote_time_ns: i64,
    #[prost(int64, tag = "3")]
    pub stop_time_ns: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFilerConfigurationRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFilerConfigurationResponse {
    #[prost(string, repeated, tag = "1")]
    pub masters: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub replication: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub max_mb: u32,
    #[prost(string, tag = "5")]
    pub dir_buckets: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub cipher: bool,
    #[prost(int32, tag = "8")]
    pub signature: i32,
    #[prost(string, tag = "9")]
    pub metrics_address: ::prost::alloc::string::String,
    #[prost(int32, tag = "10")]
    pub metrics_interval_sec: i32,
    #[prost(string, tag = "11")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub cluster_id: ::prost::alloc::string::String,
    #[prost(string, tag = "13")]
    pub filer_group: ::prost::alloc::string::String,
    #[prost(int32, tag = "14")]
    pub major_version: i32,
    #[prost(int32, tag = "15")]
    pub minor_version: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeMetadataRequest {
    #[prost(string, tag = "1")]
    pub client_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path_prefix: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub since_ns: i64,
    #[prost(int32, tag = "4")]
    pub signature: i32,
    #[prost(string, repeated, tag = "6")]
    pub path_prefixes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "7")]
    pub client_id: i32,
    #[prost(int64, tag = "8")]
    pub until_ns: i64,
    #[prost(int32, tag = "9")]
    pub client_epoch: i32,
    /// exact directory to watch
    #[prost(string, repeated, tag = "10")]
    pub directories: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeMetadataResponse {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub event_notification: ::core::option::Option<EventNotification>,
    #[prost(int64, tag = "3")]
    pub ts_ns: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraverseBfsMetadataRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub excluded_prefixes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraverseBfsMetadataResponse {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub entry: ::core::option::Option<Entry>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogEntry {
    #[prost(int64, tag = "1")]
    pub ts_ns: i64,
    #[prost(int32, tag = "2")]
    pub partition_key_hash: i32,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KeepConnectedRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub grpc_port: u32,
    #[prost(string, repeated, tag = "3")]
    pub resources: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct KeepConnectedResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocateBrokerRequest {
    #[prost(string, tag = "1")]
    pub resource: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocateBrokerResponse {
    #[prost(bool, tag = "1")]
    pub found: bool,
    #[prost(message, repeated, tag = "2")]
    pub resources: ::prost::alloc::vec::Vec<locate_broker_response::Resource>,
}
/// Nested message and enum types in `LocateBrokerResponse`.
pub mod locate_broker_response {
    /// if found, send the exact address
    /// if not found, send the full list of existing brokers
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Resource {
        #[prost(string, tag = "1")]
        pub grpc_addresses: ::prost::alloc::string::String,
        #[prost(int32, tag = "2")]
        pub resource_count: i32,
    }
}
/// ///////////////////////
/// Key-Value operations
/// ///////////////////////
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KvGetRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KvGetResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KvPutRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub value: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KvPutResponse {
    #[prost(string, tag = "1")]
    pub error: ::prost::alloc::string::String,
}
/// ///////////////////////
/// path-based configurations
/// ///////////////////////
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilerConf {
    #[prost(int32, tag = "1")]
    pub version: i32,
    #[prost(message, repeated, tag = "2")]
    pub locations: ::prost::alloc::vec::Vec<filer_conf::PathConf>,
}
/// Nested message and enum types in `FilerConf`.
pub mod filer_conf {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PathConf {
        #[prost(string, tag = "1")]
        pub location_prefix: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub collection: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub replication: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub ttl: ::prost::alloc::string::String,
        #[prost(string, tag = "5")]
        pub disk_type: ::prost::alloc::string::String,
        #[prost(bool, tag = "6")]
        pub fsync: bool,
        #[prost(uint32, tag = "7")]
        pub volume_growth_count: u32,
        #[prost(bool, tag = "8")]
        pub read_only: bool,
        #[prost(string, tag = "9")]
        pub data_center: ::prost::alloc::string::String,
        #[prost(string, tag = "10")]
        pub rack: ::prost::alloc::string::String,
        #[prost(string, tag = "11")]
        pub data_node: ::prost::alloc::string::String,
        #[prost(uint32, tag = "12")]
        pub max_file_name_length: u32,
        #[prost(bool, tag = "13")]
        pub disable_chunk_deletion: bool,
        #[prost(bool, tag = "14")]
        pub worm: bool,
        #[prost(uint64, tag = "15")]
        pub worm_grace_period_seconds: u64,
        #[prost(uint64, tag = "16")]
        pub worm_retention_time_seconds: u64,
    }
}
/// ///////////////////////
/// Remote Storage related
/// ///////////////////////
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheRemoteObjectToLocalClusterRequest {
    #[prost(string, tag = "1")]
    pub directory: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CacheRemoteObjectToLocalClusterResponse {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<Entry>,
}
/// ///////////////////////
/// distributed lock management
/// ///////////////////////
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub seconds_to_lock: i64,
    #[prost(string, tag = "3")]
    pub renew_token: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub is_moved: bool,
    #[prost(string, tag = "5")]
    pub owner: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockResponse {
    #[prost(string, tag = "1")]
    pub renew_token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub lock_owner: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub lock_host_moved_to: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub renew_token: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_moved: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockResponse {
    #[prost(string, tag = "1")]
    pub error: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub moved_to: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindLockOwnerRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub is_moved: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindLockOwnerResponse {
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lock {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub renew_token: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub expired_at_ns: i64,
    #[prost(string, tag = "4")]
    pub owner: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferLocksRequest {
    #[prost(message, repeated, tag = "1")]
    pub locks: ::prost::alloc::vec::Vec<Lock>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransferLocksResponse {}
/// Generated client implementations.
pub mod seaweed_filer_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SeaweedFilerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SeaweedFilerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SeaweedFilerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SeaweedFilerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SeaweedFilerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn lookup_directory_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::LookupDirectoryEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupDirectoryEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/LookupDirectoryEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("filer_pb.SeaweedFiler", "LookupDirectoryEntry"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_entries(
            &mut self,
            request: impl tonic::IntoRequest<super::ListEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ListEntriesResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/ListEntries",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "ListEntries"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn create_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/CreateEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "CreateEntry"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/UpdateEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "UpdateEntry"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn append_to_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::AppendToEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AppendToEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/AppendToEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "AppendToEntry"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/DeleteEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "DeleteEntry"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn atomic_rename_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::AtomicRenameEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AtomicRenameEntryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/AtomicRenameEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "AtomicRenameEntry"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn stream_rename_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::StreamRenameEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StreamRenameEntryResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/StreamRenameEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "StreamRenameEntry"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn assign_volume(
            &mut self,
            request: impl tonic::IntoRequest<super::AssignVolumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AssignVolumeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/AssignVolume",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "AssignVolume"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn lookup_volume(
            &mut self,
            request: impl tonic::IntoRequest<super::LookupVolumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupVolumeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/LookupVolume",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "LookupVolume"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn collection_list(
            &mut self,
            request: impl tonic::IntoRequest<super::CollectionListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CollectionListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/CollectionList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "CollectionList"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_collection(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCollectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/DeleteCollection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "DeleteCollection"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn statistics(
            &mut self,
            request: impl tonic::IntoRequest<super::StatisticsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StatisticsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/Statistics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "Statistics"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn ping(
            &mut self,
            request: impl tonic::IntoRequest<super::PingRequest>,
        ) -> std::result::Result<tonic::Response<super::PingResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/Ping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "Ping"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_filer_configuration(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFilerConfigurationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFilerConfigurationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/GetFilerConfiguration",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("filer_pb.SeaweedFiler", "GetFilerConfiguration"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn traverse_bfs_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::TraverseBfsMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TraverseBfsMetadataResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/TraverseBfsMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "TraverseBfsMetadata"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn subscribe_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeMetadataResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/SubscribeMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "SubscribeMetadata"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn subscribe_local_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeMetadataResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/SubscribeLocalMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("filer_pb.SeaweedFiler", "SubscribeLocalMetadata"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn kv_get(
            &mut self,
            request: impl tonic::IntoRequest<super::KvGetRequest>,
        ) -> std::result::Result<tonic::Response<super::KvGetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/KvGet",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "KvGet"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn kv_put(
            &mut self,
            request: impl tonic::IntoRequest<super::KvPutRequest>,
        ) -> std::result::Result<tonic::Response<super::KvPutResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/KvPut",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "KvPut"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn cache_remote_object_to_local_cluster(
            &mut self,
            request: impl tonic::IntoRequest<
                super::CacheRemoteObjectToLocalClusterRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::CacheRemoteObjectToLocalClusterResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/CacheRemoteObjectToLocalCluster",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "filer_pb.SeaweedFiler",
                        "CacheRemoteObjectToLocalCluster",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn distributed_lock(
            &mut self,
            request: impl tonic::IntoRequest<super::LockRequest>,
        ) -> std::result::Result<tonic::Response<super::LockResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/DistributedLock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "DistributedLock"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn distributed_unlock(
            &mut self,
            request: impl tonic::IntoRequest<super::UnlockRequest>,
        ) -> std::result::Result<tonic::Response<super::UnlockResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/DistributedUnlock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "DistributedUnlock"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_lock_owner(
            &mut self,
            request: impl tonic::IntoRequest<super::FindLockOwnerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindLockOwnerResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/FindLockOwner",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "FindLockOwner"));
            self.inner.unary(req, path, codec).await
        }
        /// distributed lock management internal use only
        pub async fn transfer_locks(
            &mut self,
            request: impl tonic::IntoRequest<super::TransferLocksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferLocksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/filer_pb.SeaweedFiler/TransferLocks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("filer_pb.SeaweedFiler", "TransferLocks"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod seaweed_filer_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SeaweedFilerServer.
    #[async_trait]
    pub trait SeaweedFiler: std::marker::Send + std::marker::Sync + 'static {
        async fn lookup_directory_entry(
            &self,
            request: tonic::Request<super::LookupDirectoryEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupDirectoryEntryResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the ListEntries method.
        type ListEntriesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ListEntriesResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn list_entries(
            &self,
            request: tonic::Request<super::ListEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::ListEntriesStream>,
            tonic::Status,
        >;
        async fn create_entry(
            &self,
            request: tonic::Request<super::CreateEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateEntryResponse>,
            tonic::Status,
        >;
        async fn update_entry(
            &self,
            request: tonic::Request<super::UpdateEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateEntryResponse>,
            tonic::Status,
        >;
        async fn append_to_entry(
            &self,
            request: tonic::Request<super::AppendToEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AppendToEntryResponse>,
            tonic::Status,
        >;
        async fn delete_entry(
            &self,
            request: tonic::Request<super::DeleteEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteEntryResponse>,
            tonic::Status,
        >;
        async fn atomic_rename_entry(
            &self,
            request: tonic::Request<super::AtomicRenameEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AtomicRenameEntryResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamRenameEntry method.
        type StreamRenameEntryStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::StreamRenameEntryResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        async fn stream_rename_entry(
            &self,
            request: tonic::Request<super::StreamRenameEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamRenameEntryStream>,
            tonic::Status,
        >;
        async fn assign_volume(
            &self,
            request: tonic::Request<super::AssignVolumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AssignVolumeResponse>,
            tonic::Status,
        >;
        async fn lookup_volume(
            &self,
            request: tonic::Request<super::LookupVolumeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupVolumeResponse>,
            tonic::Status,
        >;
        async fn collection_list(
            &self,
            request: tonic::Request<super::CollectionListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CollectionListResponse>,
            tonic::Status,
        >;
        async fn delete_collection(
            &self,
            request: tonic::Request<super::DeleteCollectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCollectionResponse>,
            tonic::Status,
        >;
        async fn statistics(
            &self,
            request: tonic::Request<super::StatisticsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StatisticsResponse>,
            tonic::Status,
        >;
        async fn ping(
            &self,
            request: tonic::Request<super::PingRequest>,
        ) -> std::result::Result<tonic::Response<super::PingResponse>, tonic::Status>;
        async fn get_filer_configuration(
            &self,
            request: tonic::Request<super::GetFilerConfigurationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFilerConfigurationResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the TraverseBfsMetadata method.
        type TraverseBfsMetadataStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::TraverseBfsMetadataResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        async fn traverse_bfs_metadata(
            &self,
            request: tonic::Request<super::TraverseBfsMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::TraverseBfsMetadataStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the SubscribeMetadata method.
        type SubscribeMetadataStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::SubscribeMetadataResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        async fn subscribe_metadata(
            &self,
            request: tonic::Request<super::SubscribeMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeMetadataStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the SubscribeLocalMetadata method.
        type SubscribeLocalMetadataStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::SubscribeMetadataResponse,
                    tonic::Status,
                >,
            >
            + std::marker::Send
            + 'static;
        async fn subscribe_local_metadata(
            &self,
            request: tonic::Request<super::SubscribeMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeLocalMetadataStream>,
            tonic::Status,
        >;
        async fn kv_get(
            &self,
            request: tonic::Request<super::KvGetRequest>,
        ) -> std::result::Result<tonic::Response<super::KvGetResponse>, tonic::Status>;
        async fn kv_put(
            &self,
            request: tonic::Request<super::KvPutRequest>,
        ) -> std::result::Result<tonic::Response<super::KvPutResponse>, tonic::Status>;
        async fn cache_remote_object_to_local_cluster(
            &self,
            request: tonic::Request<super::CacheRemoteObjectToLocalClusterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CacheRemoteObjectToLocalClusterResponse>,
            tonic::Status,
        >;
        async fn distributed_lock(
            &self,
            request: tonic::Request<super::LockRequest>,
        ) -> std::result::Result<tonic::Response<super::LockResponse>, tonic::Status>;
        async fn distributed_unlock(
            &self,
            request: tonic::Request<super::UnlockRequest>,
        ) -> std::result::Result<tonic::Response<super::UnlockResponse>, tonic::Status>;
        async fn find_lock_owner(
            &self,
            request: tonic::Request<super::FindLockOwnerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindLockOwnerResponse>,
            tonic::Status,
        >;
        /// distributed lock management internal use only
        async fn transfer_locks(
            &self,
            request: tonic::Request<super::TransferLocksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferLocksResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct SeaweedFilerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SeaweedFilerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SeaweedFilerServer<T>
    where
        T: SeaweedFiler,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/filer_pb.SeaweedFiler/LookupDirectoryEntry" => {
                    #[allow(non_camel_case_types)]
                    struct LookupDirectoryEntrySvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::LookupDirectoryEntryRequest>
                    for LookupDirectoryEntrySvc<T> {
                        type Response = super::LookupDirectoryEntryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LookupDirectoryEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::lookup_directory_entry(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LookupDirectoryEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/ListEntries" => {
                    #[allow(non_camel_case_types)]
                    struct ListEntriesSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::ServerStreamingService<super::ListEntriesRequest>
                    for ListEntriesSvc<T> {
                        type Response = super::ListEntriesResponse;
                        type ResponseStream = T::ListEntriesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListEntriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::list_entries(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListEntriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/CreateEntry" => {
                    #[allow(non_camel_case_types)]
                    struct CreateEntrySvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::CreateEntryRequest>
                    for CreateEntrySvc<T> {
                        type Response = super::CreateEntryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::create_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/UpdateEntry" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateEntrySvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::UpdateEntryRequest>
                    for UpdateEntrySvc<T> {
                        type Response = super::UpdateEntryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::update_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/AppendToEntry" => {
                    #[allow(non_camel_case_types)]
                    struct AppendToEntrySvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::AppendToEntryRequest>
                    for AppendToEntrySvc<T> {
                        type Response = super::AppendToEntryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AppendToEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::append_to_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AppendToEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/DeleteEntry" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteEntrySvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::DeleteEntryRequest>
                    for DeleteEntrySvc<T> {
                        type Response = super::DeleteEntryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::delete_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/AtomicRenameEntry" => {
                    #[allow(non_camel_case_types)]
                    struct AtomicRenameEntrySvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::AtomicRenameEntryRequest>
                    for AtomicRenameEntrySvc<T> {
                        type Response = super::AtomicRenameEntryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AtomicRenameEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::atomic_rename_entry(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AtomicRenameEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/StreamRenameEntry" => {
                    #[allow(non_camel_case_types)]
                    struct StreamRenameEntrySvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::ServerStreamingService<
                        super::StreamRenameEntryRequest,
                    > for StreamRenameEntrySvc<T> {
                        type Response = super::StreamRenameEntryResponse;
                        type ResponseStream = T::StreamRenameEntryStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StreamRenameEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::stream_rename_entry(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StreamRenameEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/AssignVolume" => {
                    #[allow(non_camel_case_types)]
                    struct AssignVolumeSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::AssignVolumeRequest>
                    for AssignVolumeSvc<T> {
                        type Response = super::AssignVolumeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AssignVolumeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::assign_volume(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AssignVolumeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/LookupVolume" => {
                    #[allow(non_camel_case_types)]
                    struct LookupVolumeSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::LookupVolumeRequest>
                    for LookupVolumeSvc<T> {
                        type Response = super::LookupVolumeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LookupVolumeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::lookup_volume(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LookupVolumeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/CollectionList" => {
                    #[allow(non_camel_case_types)]
                    struct CollectionListSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::CollectionListRequest>
                    for CollectionListSvc<T> {
                        type Response = super::CollectionListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CollectionListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::collection_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CollectionListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/DeleteCollection" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteCollectionSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::DeleteCollectionRequest>
                    for DeleteCollectionSvc<T> {
                        type Response = super::DeleteCollectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteCollectionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::delete_collection(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteCollectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/Statistics" => {
                    #[allow(non_camel_case_types)]
                    struct StatisticsSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::StatisticsRequest>
                    for StatisticsSvc<T> {
                        type Response = super::StatisticsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatisticsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::statistics(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatisticsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/Ping" => {
                    #[allow(non_camel_case_types)]
                    struct PingSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<T: SeaweedFiler> tonic::server::UnaryService<super::PingRequest>
                    for PingSvc<T> {
                        type Response = super::PingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::ping(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/GetFilerConfiguration" => {
                    #[allow(non_camel_case_types)]
                    struct GetFilerConfigurationSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::GetFilerConfigurationRequest>
                    for GetFilerConfigurationSvc<T> {
                        type Response = super::GetFilerConfigurationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFilerConfigurationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::get_filer_configuration(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFilerConfigurationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/TraverseBfsMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct TraverseBfsMetadataSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::ServerStreamingService<
                        super::TraverseBfsMetadataRequest,
                    > for TraverseBfsMetadataSvc<T> {
                        type Response = super::TraverseBfsMetadataResponse;
                        type ResponseStream = T::TraverseBfsMetadataStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TraverseBfsMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::traverse_bfs_metadata(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TraverseBfsMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/SubscribeMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeMetadataSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeMetadataRequest,
                    > for SubscribeMetadataSvc<T> {
                        type Response = super::SubscribeMetadataResponse;
                        type ResponseStream = T::SubscribeMetadataStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::subscribe_metadata(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/SubscribeLocalMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeLocalMetadataSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeMetadataRequest,
                    > for SubscribeLocalMetadataSvc<T> {
                        type Response = super::SubscribeMetadataResponse;
                        type ResponseStream = T::SubscribeLocalMetadataStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::subscribe_local_metadata(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeLocalMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/KvGet" => {
                    #[allow(non_camel_case_types)]
                    struct KvGetSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::KvGetRequest> for KvGetSvc<T> {
                        type Response = super::KvGetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::KvGetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::kv_get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = KvGetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/KvPut" => {
                    #[allow(non_camel_case_types)]
                    struct KvPutSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::KvPutRequest> for KvPutSvc<T> {
                        type Response = super::KvPutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::KvPutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::kv_put(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = KvPutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/CacheRemoteObjectToLocalCluster" => {
                    #[allow(non_camel_case_types)]
                    struct CacheRemoteObjectToLocalClusterSvc<T: SeaweedFiler>(
                        pub Arc<T>,
                    );
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<
                        super::CacheRemoteObjectToLocalClusterRequest,
                    > for CacheRemoteObjectToLocalClusterSvc<T> {
                        type Response = super::CacheRemoteObjectToLocalClusterResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CacheRemoteObjectToLocalClusterRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::cache_remote_object_to_local_cluster(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CacheRemoteObjectToLocalClusterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/DistributedLock" => {
                    #[allow(non_camel_case_types)]
                    struct DistributedLockSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<T: SeaweedFiler> tonic::server::UnaryService<super::LockRequest>
                    for DistributedLockSvc<T> {
                        type Response = super::LockResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LockRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::distributed_lock(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DistributedLockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/DistributedUnlock" => {
                    #[allow(non_camel_case_types)]
                    struct DistributedUnlockSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::UnlockRequest>
                    for DistributedUnlockSvc<T> {
                        type Response = super::UnlockResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnlockRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::distributed_unlock(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DistributedUnlockSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/FindLockOwner" => {
                    #[allow(non_camel_case_types)]
                    struct FindLockOwnerSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::FindLockOwnerRequest>
                    for FindLockOwnerSvc<T> {
                        type Response = super::FindLockOwnerResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindLockOwnerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::find_lock_owner(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindLockOwnerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/filer_pb.SeaweedFiler/TransferLocks" => {
                    #[allow(non_camel_case_types)]
                    struct TransferLocksSvc<T: SeaweedFiler>(pub Arc<T>);
                    impl<
                        T: SeaweedFiler,
                    > tonic::server::UnaryService<super::TransferLocksRequest>
                    for TransferLocksSvc<T> {
                        type Response = super::TransferLocksResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TransferLocksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SeaweedFiler>::transfer_locks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TransferLocksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SeaweedFilerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "filer_pb.SeaweedFiler";
    impl<T> tonic::server::NamedService for SeaweedFilerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
